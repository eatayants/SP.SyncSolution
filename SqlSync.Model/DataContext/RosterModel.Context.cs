//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Roster.Model.DataContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RosterEntities : DbContext
    {
        public RosterEntities()
            : base("name=RosterEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Definition> Definitions { get; set; }
        public virtual DbSet<DefType> DefTypes { get; set; }
        public virtual DbSet<RosterEvent> RosterEvents { get; set; }
        public virtual DbSet<SystemOption> SystemOptions { get; set; }
        public virtual DbSet<ViewMetadata> ViewMetadatas { get; set; }
        public virtual DbSet<ViewMetadataField> ViewMetadataFields { get; set; }
        public virtual DbSet<ViewMetadataPopupSetting> ViewMetadataPopupSettings { get; set; }
        public virtual DbSet<ViewMetadataWhereCritery> ViewMetadataWhereCriteries { get; set; }
        public virtual DbSet<ListMapping> ListMappings { get; set; }
        public virtual DbSet<ListMappingField> ListMappingFields { get; set; }
        public virtual DbSet<ListMetadataAction> ListMetadataActions { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<HolidayObserved> HolidayObserveds { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<ListMetadataField> ListMetadataFields { get; set; }
        public virtual DbSet<ListMetadata> ListMetadatas { get; set; }
        public virtual DbSet<ListMetadataContentType> ListMetadataContentTypes { get; set; }
        public virtual DbSet<ListMetadataFieldContentType> ListMetadataFieldContentTypes { get; set; }
        public virtual DbSet<HolidayEvent> HolidayEvents { get; set; }
        public virtual DbSet<EventStatus> EventStatuses { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<HolidayType> HolidayTypes { get; set; }
        public virtual DbSet<AccessControlItem> AccessControlItems { get; set; }
        public virtual DbSet<AccessControlList> AccessControlLists { get; set; }
        public virtual DbSet<RosterEventLock> RosterEventLocks { get; set; }
        public virtual DbSet<vwEventStatu> vwEventStatus { get; set; }
        public virtual DbSet<vwRosterEventTrackData> vwRosterEventTrackData { get; set; }
    
        public virtual int Holiday_PopulateNextYear(Nullable<bool> clear)
        {
            var clearParameter = clear.HasValue ?
                new ObjectParameter("clear", clear) :
                new ObjectParameter("clear", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Holiday_PopulateNextYear", clearParameter);
        }
    
        public virtual int RorterEvents_PlannedCreate(string eventIds, ObjectParameter message)
        {
            var eventIdsParameter = eventIds != null ?
                new ObjectParameter("eventIds", eventIds) :
                new ObjectParameter("eventIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RorterEvents_PlannedCreate", eventIdsParameter, message);
        }
    
        public virtual int RorterEvents_TimesheetCreate(string eventIds, ObjectParameter message)
        {
            var eventIdsParameter = eventIds != null ?
                new ObjectParameter("eventIds", eventIds) :
                new ObjectParameter("eventIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RorterEvents_TimesheetCreate", eventIdsParameter, message);
        }
    
        public virtual int SqlServerAgent_Status(ObjectParameter status)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SqlServerAgent_Status", status);
        }
    
        public virtual ObjectResult<SqlServerAgent_JobList_Result> SqlServerAgent_JobList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SqlServerAgent_JobList_Result>("SqlServerAgent_JobList");
        }
    
        public virtual int RorterEvents_TimesheetCheckApprove(Nullable<System.Guid> itemId, Nullable<System.DateTime> startDate, ObjectParameter allow, ObjectParameter message)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(System.Guid));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RorterEvents_TimesheetCheckApprove", itemIdParameter, startDateParameter, allow, message);
        }
    
        public virtual int RorterEvents_TimesheetsCheckApprove(Nullable<System.DateTime> startDate, Nullable<int> workerId, ObjectParameter allow, ObjectParameter message)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var workerIdParameter = workerId.HasValue ?
                new ObjectParameter("workerId", workerId) :
                new ObjectParameter("workerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RorterEvents_TimesheetsCheckApprove", startDateParameter, workerIdParameter, allow, message);
        }

        public virtual int RosterEvents_SetProperties(Nullable<System.Guid> itemId, ObjectParameter message)
        {
            var itemIdParameter = itemId.HasValue ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RosterEvents_SetProperties", itemIdParameter, message);
        }

    
        public virtual int RorterEvents_WorkingCreate(string eventIds, ObjectParameter message)
        {
            var eventIdsParameter = eventIds != null ?
                new ObjectParameter("eventIds", eventIds) :
                new ObjectParameter("eventIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RorterEvents_WorkingCreate", eventIdsParameter, message);
        }
    }
}
